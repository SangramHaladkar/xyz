package com.mobifilia.monitormymortgage;

import android.Manifest;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.annotation.NonNull;
import android.support.design.widget.NavigationView;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.MenuItem;
import android.widget.Toast;

import com.facebook.Profile;
import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;
import com.mobifilia.monitormymortgage.Activity.LoginActivity;
import com.mobifilia.monitormymortgage.Activity.ShowImagesActivity;
import com.mobifilia.monitormymortgage.BaseClasses.BaseActivity;
import com.mobifilia.monitormymortgage.Common.CommonConstants;
import com.mobifilia.monitormymortgage.DataHolderClasses.UserObject;
import com.mobifilia.monitormymortgage.Fragments.FAQFragment;
import com.mobifilia.monitormymortgage.Fragments.MyDashboardFragment;
import com.mobifilia.monitormymortgage.Fragments.MyM3AccountFragment;
import com.mobifilia.monitormymortgage.Fragments.NotificationSettingFragment;
import com.mobifilia.monitormymortgage.Fragments.PrivacyPolicyFragment;
import com.mobifilia.monitormymortgage.Fragments.TermsAndConditionFragment;

import java.util.List;

import im.delight.android.ddp.MeteorSingleton;
import im.delight.android.ddp.ResultListener;


public class MainActivity extends BaseActivity
        implements NavigationView.OnNavigationItemSelectedListener, GoogleApiClient.OnConnectionFailedListener {
    FragmentManager fragmentManager;
    Profile profile;
    private GoogleApiClient mGoogleApiClient;
    UserObject userObject;

    private static final String TAG = "MainActivity";
    String username;
    String facebookUserLoginId;
    boolean facebookUserLoginFlag;
    String googleUserLoginId;
    boolean googleUserLoginFlag;
    final private int REQUEST_CODE_ASK_PERMISSIONS = 123;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        fragmentManager = getSupportFragmentManager();
        username = PreferenceManager.getDefaultSharedPreferences(this).getString("username", "");
        facebookUserLoginId = PreferenceManager.getDefaultSharedPreferences(this).getString("FacebookUserLoginId", "");
        facebookUserLoginFlag = PreferenceManager.getDefaultSharedPreferences(this).getBoolean("FacebookUserLoginFlag", false);
        googleUserLoginId = PreferenceManager.getDefaultSharedPreferences(this).getString("GoogleUserLoginId", "");
        googleUserLoginFlag = PreferenceManager.getDefaultSharedPreferences(this).getBoolean("GoogleUserLoginFlag", false);
        Log.v(TAG + "username", username);
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestEmail()
                .build();
        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .enableAutoManage(this /* FragmentActivity */, this /* OnConnectionFailedListener */)
                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
                .build();
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        if (drawer != null) {
            drawer.addDrawerListener(toggle);
        }
        toggle.syncState();
        userObject = new UserObject();
        // setUserObject();
        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        if (navigationView != null) {
            navigationView.setNavigationItemSelectedListener(this);
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            int hasWriteContactsPermission = ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_CONTACTS);
            if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) {
                requestPermissions(new String[]{Manifest.permission.GET_ACCOUNTS, Manifest.permission.WRITE_EXTERNAL_STORAGE},
                        REQUEST_CODE_ASK_PERMISSIONS);
            }
        }
        MyDashboardFragment myDashboardFragment = new MyDashboardFragment();
        FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();
        fragmentTransaction.replace(R.id.container, myDashboardFragment).commit();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        switch (requestCode) {
            case REQUEST_CODE_ASK_PERMISSIONS:
                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    // Permission Granted
                    //signIn();
                } else {
                    // Permission Denied
                    Toast.makeText(MainActivity.this, "Permission Denied.", Toast.LENGTH_SHORT).show();
                }
                break;
            default:
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }

    @Override
    protected void onResume() {
        supportInvalidateOptionsMenu();
        if (!ShowImagesActivity.flagChanged) {
            MyDashboardFragment myDashboardFragment = new MyDashboardFragment();
            FragmentManager fragmentManager = getSupportFragmentManager();
            fragmentManager.beginTransaction().replace(R.id.container, myDashboardFragment).commit();
        }
        ShowImagesActivity.flagChanged = false;
        super.onResume();
    }


    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
//        Fragment fragment = getSupportFragmentManager().getFragments().get(0);
//        Log.v("TAG",fragment.toString());
        List<Fragment> fragments = getSupportFragmentManager().getFragments();
        Log.v("TAG", fragments.toString());
        for (Fragment fragment : fragments) {
            if (fragment != null && fragment instanceof MyDashboardFragment) {
                super.onBackPressed();
            } else {
                FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction();
                fragmentTransaction.replace(R.id.container, new MyDashboardFragment()).commit();
                assert drawer != null;
                if (drawer.isDrawerOpen(GravityCompat.START)) {
                    drawer.closeDrawer(GravityCompat.START);
                }
            }
        }
    }

//    @Override
//    public boolean onCreateOptionsMenu(final Menu menu) {
//        // Inflate the menu; this adds items to the action bar if it is present.
//        getMenuInflater().inflate(R.menu.main, menu);
//        menu.findItem(R.id.icon).setVisible(true);
//        menu.findItem(R.id.closeButton).setVisible(false);
//        menu.findItem(R.id.icon).setEnabled(false);
//        HashMap<String, Object> stringObjectHashMap = new HashMap<>();
//        if (facebookUserLoginFlag) {
//            stringObjectHashMap.put("user_id", facebookUserLoginId);
//        } else if (googleUserLoginFlag) {
//            stringObjectHashMap.put("user_id", googleUserLoginId);
//        } else {
//            stringObjectHashMap.put("user_id", username);
//        }
//        stringObjectHashMap.put("lang", "en");
//        stringObjectHashMap.put("req_from", "android");
//        ErisCollectionManager.getInstance().callMethod("getUserUnreadNotificationCount", new Object[]{stringObjectHashMap}, new ResultListener() {
//            @Override
//            public void onSuccess(String result) {
//                try {
//                    JSONObject jsonObjectMain = new JSONObject(result);
//                    JSONObject jsonObjectData = jsonObjectMain.getJSONObject("data");
//                    JSONObject jsonObjectResult = jsonObjectData.getJSONObject("result");
//                    String notificationCnt = jsonObjectResult.getString("notification_count");
//                    if (!notificationCnt.equals("0")) {
//
//                        MenuItem menuItem = menu.findItem(R.id.badge);
//                        menu.findItem(R.id.icon).setVisible(false);
//                        menu.findItem(R.id.closeButton).setVisible(false);
//                        MenuItemCompat.setActionView(menuItem, R.layout.badge_menu);
//                        FrameLayout relativeLayout = (FrameLayout) MenuItemCompat.getActionView(menuItem);
//                        TextView bellTextView = (TextView) relativeLayout.findViewById(R.id.bellTextView);
//                        TextView textView = (TextView) relativeLayout.findViewById(R.id.actionbar_notifcation_textview);
//
//                        textView.setText(notificationCnt);
//
//                        bellTextView.setOnClickListener(new View.OnClickListener() {
//                            @Override
//                            public void onClick(View v) {
//                                Intent intent = new Intent(MainActivity.this, NotificationListActivity.class);
//                                startActivity(intent);
//                            }
//                        });
//                    } else if (notificationCnt.equals("0")) {
//                        getMenuInflater().inflate(R.menu.main, menu);
//                        //Todo:need to fix on priority.
//                        supportInvalidateOptionsMenu();
//                        menu.findItem(R.id.icon).setVisible(true);
//                        menu.findItem(R.id.closeButton).setVisible(false);
//                        menu.findItem(R.id.icon).setEnabled(false);
//                    }
//
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            }
//
//            @Override
//            public void onError(String error, String reason, String details) {
//
//            }
//        });
//        return super.onCreateOptionsMenu(menu);
//    }


    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.nav_dashboard) {
            MyDashboardFragment myDashboardFragment = new MyDashboardFragment();
            fragmentManager.beginTransaction().replace(R.id.container, myDashboardFragment).commit();
        } else if (id == R.id.nav_my_m3_account) {
            MyM3AccountFragment myM3AccountFragment = new MyM3AccountFragment();
            fragmentManager.beginTransaction().replace(R.id.container, myM3AccountFragment).commit();
        } else if (id == R.id.nav_notification_settings) {
            NotificationSettingFragment notificationSettingFragment = new NotificationSettingFragment();
            fragmentManager.beginTransaction().replace(R.id.container, notificationSettingFragment).commit();
        } else if (id == R.id.nav_faq) {
            FAQFragment faqFragment = new FAQFragment();
            fragmentManager.beginTransaction().replace(R.id.container, faqFragment).commit();
        } else if (id == R.id.nav_terms_condition) {
            TermsAndConditionFragment termsAndConditionFragment = new TermsAndConditionFragment();
            fragmentManager.beginTransaction().replace(R.id.container, termsAndConditionFragment).commit();
        } else if (id == R.id.nav_privacy_policy) {
            PrivacyPolicyFragment privacyPolicyFragment = new PrivacyPolicyFragment();
            fragmentManager.beginTransaction().replace(R.id.container, privacyPolicyFragment).commit();
        } else if (id == R.id.nav_logout) {
            try {
                if (MeteorSingleton.getInstance().isConnected()) {
                    MeteorSingleton.getInstance().logout(new ResultListener() {
                        @Override
                        public void onSuccess(String result) {
                            try {
                                if (CommonConstants.mDebug)
                                    Log.v("MainActivity", "Logout onSuccess" + result);
                                PreferenceManager.getDefaultSharedPreferences(getBaseContext()).edit().remove("username").apply();
                                finish();
                                Intent intent = new Intent(MainActivity.this, LoginActivity.class);
                                startActivity(intent);
                                profile = Profile.getCurrentProfile();
//                                if (profile != null) {
//                                    LoginManager.getInstance().logOut();
                                PreferenceManager.getDefaultSharedPreferences(getBaseContext()).edit().remove("FacebookUserLoginId").apply();
                                PreferenceManager.getDefaultSharedPreferences(getBaseContext()).edit().remove("FacebookUserLoginFlag").apply();

                                //}
                                signOut();

                            } catch (NullPointerException e) {
                                e.printStackTrace();
                            }
                        }


                        @Override
                        public void onError(String error, String reason, String details) {
                            if (CommonConstants.mDebug) Log.v("onError", reason);
//                                    MeteorSingleton.getInstance().reconnect();
//                                ViewDialog.showAlertPopUp(MainActivity.this, "Error : " + reason + "" + details, "Error");
                        }
                    });
                } else {
                    Toast.makeText(getApplicationContext(), "Error : Unable to logout,Server connection is lost.", Toast.LENGTH_LONG).show();
                    MeteorSingleton.getInstance().reconnect();
                }
            } catch (Exception e) {
                e.printStackTrace();
                if (CommonConstants.mDebug) Log.v("TAG", e.toString());

            }

        } else {
            MyDashboardFragment myDashboardFragment = new MyDashboardFragment();
            fragmentManager.beginTransaction().replace(R.id.container, myDashboardFragment).commit();
        }

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        assert drawer != null;
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    public void signOut() {
        Auth.GoogleSignInApi.signOut(mGoogleApiClient).setResultCallback(
                new ResultCallback<Status>() {
                    @Override
                    public void onResult(@NonNull Status status) {

                        // [START_EXCLUDE]
                        Log.v("MainActivity ", "Successfully logout from google" + status);
                        PreferenceManager.getDefaultSharedPreferences(getBaseContext()).edit().remove("GoogleUserLoginId").apply();
                        PreferenceManager.getDefaultSharedPreferences(getBaseContext()).edit().remove("GoogleUserLoginFlag").apply();

                        // [END_EXCLUDE]
                    }
                });
    }

    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {
    }

}
